<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Speech Reco." id="1" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="192" y="32">
              <bitmap>media/images/box/interaction/ear.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                wordList = [
                    "five",
                    "ten",
                    "fifteen",
                    "twenty",
                    "twenty five",
                    "thirty",
                    "thirty five",
                    "fourty",
                    "fourty five",
                    "fifty",
                    "fifty five",
                    "sixty",
                    "sixty five",
                    "seventy",
                    "seventy five",
                    "eighty",
                    "eighty five",
                    "ninety",
                    "ninety five",
                    "one hundred",
                    "one hundred five",
                    "one hundred ten",
                    "one hundred fifteen",
                    "one hundred twenty",
                    "one hundred twenty five",
                    "one hundred thirty",
                    "one hundred thirty five",
                    "one hundred fourty",
                    "one hundred fourty five",
                    "one hundred fifty",
                    "one hundred fifty five",
                    "one hundred sixty",
                    "one hundred sixty five",
                    "one hundred seventy",
                    "one hundred seventy five",
                    "one hundred eighty",
                    "one hundred eighty five",
                    "one hundred ninety",
                    "one hundred ninety five",
                    "two hundred",
                    "two hundred five",
                    "two hundred ten",
                    "two hundred fifteen",
                    "two hundred twenty",
                    "two hundred twenty five",
                    "two hundred thirty",
                    "two hundred thirty five",
                    "two hundred fourty",
                    "two hundred fourty five",
                    "two hundred fifty",
                    "two hundred fifty five",
                    "two hundred sixty",
                    "two hundred sixty five",
                    "two hundred seventy",
                    "two hundred seventy five",
                    "two hundred eighty",
                    "two hundred eighty five",
                    "two hundred ninety",
                    "two hundred ninety five",
                    "three hundred ",
                    "three hundred five",
                    "three hundred ten",
                    "three hundred fifteen",
                    "three hundred twenty",
                    "three hundred twenty five",
                    "three hundred thirty",
                    "three hundred thirty five",
                    "three hundred fourty",
                    "three hundred fourty five",
                    "three hundred fifty",
                    "three hundred fifty five",
                    "three hundred sixty",
                    "exit",
                    "stop",
                    "cancel"
                    ]
                self.asr.setVocabulary( wordList, self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
              <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
              <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="yes;no" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
              <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
              <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
              <Resource name="Speech recognition" type="Lock" timeout="0" />
            </Box>
            <Box name="Say" id="2" localization="8" tooltip="Say some text. The text can be localized." x="61" y="20">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="How far do you want me to turn?" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Switch Case" id="3" localization="8" tooltip="" x="162" y="211">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        p = self.typeConversion(p)

        stop_commands = [
            "stop",
            "exit",
            "quit"
            ]

        if(p in stop_commands):
            self.exit()
        else:
            self.onDefault(p)
            self.onStopped()

    def typeConversion(self, p):
        try:
            p = float(p)
            pint = int(p)
            if( p == pint ):
                p = pint
        except:
            p = str(p)
        return p

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="1" inner="0" tooltip="Runs when a string is input" id="2" />
              <Output name="onDefault" type="3" type_size="1" nature="2" inner="0" tooltip="When any other string was input" id="3" />
              <Output name="exit" type="1" type_size="1" nature="2" inner="0" tooltip='activates when &quot;exit&quot; &quot;stop&quot; or &quot;quit&quot; was called' id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
            </Box>
            <Box name="Turn Degrees" id="4" localization="8" tooltip="The robot will turn the secified amout of dehgrees" x="391" y="223">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import almath

deg = -1

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        global deg

        motion = ALProxy("ALMotion")

        deg *= almath.TO_RAD

        motion.walkTo(0, 0, deg)

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_degrees(self, p):
        global deg

        if p =="five":
            deg *= 5
        elif p == "ten":
            deg *= 10
        elif p == "fifteen":
            deg *= 15
        elif p == "twenty":
            deg *= 20
        elif p == "twenty five":
            deg *= 25
        elif p == "thirty":
            deg *= 30
        elif p == "thirty five":
            deg *= 35
        elif p == "fourty":
            deg *= 40
        elif p == "fourty five":
            deg *= 45
        elif p == "fifty":
            deg *= 50
        elif p == "fifty five":
            deg *= 55
        elif p == "sixty":
            deg *= 60
        elif p == "sixty five":
            deg *= 65
        elif p == "seventy":
            deg *= 70
        elif p == "seventy five":
            deg *= 75
        elif p == "eighty":
            deg *=80
        elif p == "eighty five":
            deg *= 85
        elif p == "ninety":
            deg *= 90
        elif p == "ninety five":
            deg *= 95
        elif p == "one hundred":
            deg *= 100
        elif p == "one hundred five":
            deg *= 105
        elif p == "one hundred ten":
            deg *= 110
        elif p == "one hundred fifteen":
            deg *= 115
        elif p == "one hundred twenty":
            deg *= 120
        elif p == "one hundred twenty five":
            deg *= 125
        elif p == "one hundred thirty":
            deg *= 130
        elif p == "one hundred thirty five":
            deg *= 135
        elif p == "one hundred fourty":
            deg *= 140
        elif p == "one hundred fourty five":
            deg *= 145
        elif p == "one hundred fifty":
            deg *= 150
        elif p == "one hundred fifty five":
            deg *= 155
        elif p == "one hundred sixty":
            deg *= 160
        elif p == "one hundred sixty five":
            deg *= 165
        elif p == "one hundred seventy":
            deg *= 170
        elif p == "one hundred seventy five":
            deg *= 175
        elif p == "one hundred eighty":
            deg *= 180
        elif p == "one hundred eighty five":
            deg *= 185
        elif p == "one hundred ninety":
            deg *= 190
        elif p == "one hundred ninety five":
            deg *= 195
        elif p == "two hundred":
            deg *= 200
        elif p == "two hundred five":
            deg *= 205
        elif p == "two hundred ten":
            deg *= 210
        elif p == "two hundred fifteen":
            deg *= 215
        elif p == "two hundred twenty":
            deg *= 220
        elif p == "two hundred twenty five":
            deg *= 225
        elif p == "two hundred thirty":
            deg *= 230
        elif p == "two hundred thirty five":
            deg *= 235
        elif p == "two hundred fourty":
            deg *= 240
        elif p == "two hundred fourty five":
            deg *= 245
        elif p == "two hundred fifty":
            deg *= 250
        elif p == "two hundred fifty five":
            deg *= 255
        elif p == "two hundred sixty":
            deg *= 260
        elif p == "two hundred sixty five":
            deg *= 265
        elif p == "two hundred seventy":
            deg *= 270
        elif p == "two hundred seventy five":
            deg *= 275
        elif p == "two hundred eighty":
            deg *= 280
        elif p == "two hundred eighty five":
            deg *= 285
        elif p == "two hundred ninety":
            deg *= 290
        elif p == "two hundred ninety five":
            deg *= 295
        elif p == "three hundred ":
            deg *= 300
        elif p == "three hundred five":
            deg *= 305
        elif p == "three hundred ten":
            deg *= 310
        elif p == "three hundred fifteen":
            deg *= 315
        elif p == "three hundred twenty":
            deg *= 320
        elif p == "three hundred twenty five":
            deg *= 325
        elif p == "three hundred thirty":
            deg *= 330
        elif p == "three hundred thirty five":
            deg *= 335
        elif p == "three hundred fourty":
            deg *= 340
        elif p == "three hundred fourty five":
            deg *= 345
        elif p == "three hundred fifty":
            deg *= 350
        elif p == "three hundred fifty five":
            deg *= 355
        elif p == "three hundred sixty":
            deg *= 360]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="degrees" type="3" type_size="1" nature="1" inner="0" tooltip="The amount the robot will turn" id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
            </Box>
            <Box name="Goodbye" id="5" localization="8" tooltip="See ya later nerds" x="401" y="28">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        tts = ALProxy("ALTextToSpeech")
        tts.say("Okay")
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="1" indexofinput="3" outputowner="1" indexofoutput="5" />
            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="5" />
            <Link inputowner="4" indexofinput="4" outputowner="3" indexofoutput="3" />
            <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="5" />
            <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="5" />
            <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
